/*
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  // Workflow flags
  typhi_input = null
  mtb_input = null
  coverage = 30
  typhi_ref_fasta = "$baseDir/data/typhi/AL513382.1.fasta"
  typhi_biohansel_scheme_fasta = "$baseDir/data/typhi/biohansel/kmers.fasta"
  typhi_biohansel_metadata_tsv = "$baseDir/data/typhi/biohansel/meta.tsv"
  typhi_biohansel_mincov = 8
  typhi_ska_marker_fastas = "$baseDir/data/typhi/ska/bh_scheme/*.fasta"
  typhi_ska_profile = "$baseDir/data/typhi/ska/scheme_profile.txt"
  mtb_biohansel_scheme_fasta = "$baseDir/data/mtb/biohansel/kmers.fasta"
  mtb_biohansel_metadata_tsv = "$baseDir/data/mtb/biohansel/meta.tsv"
  mtb_biohansel_mincov = 8
  mtb_ska_marker_fastas = "$baseDir/data/mtb/ska/bh_scheme/*.fasta"
  mtb_ska_profile = "$baseDir/data/mtb/ska/scheme_profile.txt"
  art_seq_sys = 'MSv1'
  art_min_qscore = 20
  art_read_length = 250
  art_mean_fragment_length = 800
  art_fragment_length_sdev = 50
  art_random_seed = 42

  outdir = 'results'

  // SLURM cluster options
  slurm_queue = null
  slurm_queue_size = 100

  // Boilerplate options
  name = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  custom_config_version = 'master'

  container = null
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
process.container = params.container

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    // provide full container url to Singularity-Hub.org
    process.container = "shub://${params.container}"
  }
  slurm { includeConfig 'conf/slurm.config' }
  test { includeConfig 'conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/execution_dag.svg"
}

manifest {
  name = 'peterk87/nf-bh-typing-comparison'
  author = 'Peter Kruczkiewicz'
  homePage = 'https://github.com/peterk87/nf-bh-typing-comparison'
  description = 'Benchmarking pipeline for BioHansel, SKA, Genotyphi, TB-Profiler for Salmonella Typhi and M. tuberculosis'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.0'
  version = '1.0.0'
}

// If parent path exists, then return `p`, else return null
def checkParentExists(p) {
  f = new File(p)
  if ((new File(f.parent)).exists()) {
    p
  } else {
    null
  }
}

// If path exists, return `p`, else return null
def checkPathExists(p) {
  f = new File(p)
  if (f.exists()) {
    p
  } else {
    null
  }
}

// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
  envMap = new HashMap(System.getenv())
  if (envMap.containsKey(envKey)) {
    envMap[envKey]
  } else {
    defaultValue
  }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
